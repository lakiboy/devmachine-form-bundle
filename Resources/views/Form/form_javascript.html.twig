{% block devmachine_date_javascript %}
    <script type="text/javascript">
        $(function () {
            var config = {{ config | json_encode | raw }};

            {% if inline %}
                $('#{{ id }}-calendar').datepicker(config).on('changeDate', function () {
                    $('#{{ id }}').val($(this).datepicker('getFormattedDate'));
                });
            {% elseif input_addon %}
                $('#{{ id }}-container').datepicker(config);
            {% else %}
                $('#{{ id }}').datepicker(config);
            {% endif %}
        });
    </script>
{% endblock %}

{% block devmachine_datetime_javascript %}
    <script type="text/javascript">
        $(function () {
            var config = {{ config | json_encode | raw }};

            {% if inline %}
                $('#{{ id }}-calendar').datetimepicker(config).on('dp.change', function () {
                    var dp = $(this).data('DateTimePicker');

                    // Get formatted date.
                    $('#{{ id }}').val(dp.date().format(dp.format()));
                });

                // Init current date time picker.
                if ($('#{{ id }}').val()) {
                    $('#{{ id }}-calendar').data('DateTimePicker').date($('#{{ id }}').val());
                }
            {% elseif input_addon %}
                $('#{{ id }}-container').datetimepicker(config);
            {% else %}
                $('#{{ id }}').datetimepicker(config);
            {% endif %}
        });
    </script>
{% endblock %}

{% block devmachine_child_choice_javascript %}
    <script type="text/javascript">
        $(function () {
            var $options = $('#{{ id }} optgroup').clone(),
                $parent  = $('#{{ form.parent.children[parent].vars.id }}'),
                $select  = $('#{{ id }}');
            ;

            $select.children('optgroup').remove();

            {% if select2 %}
                $select.select2();
            {% endif %}

            $parent.change(function () {
                {% if required or multiple %}
                    $select.children().remove();
                {% else %}
                    $select.children().slice(1).remove();
                {% endif %}

                {% if select2 %}
                    $select.select2('val', '');
                {% endif %}

                var $filtered = $options.filter('[label="' + $(this).val() + '"]').children().clone();

                $select.append($filtered).change();
            }).change();
        });
    </script>
{% endblock %}

{% block devmachine_typeahead_javascript %}
    <script type="text/javascript">
        $(function () {
            var key = {{ value_key | json_encode | raw }}, matcher;

            {% if route_name %}
                matcher = function findMatches(q, cb, acb) {
                    $.get('{{ path(route_name, route_params) }}', { query: q, matcher: '{{ matcher }}' }, function (result) {
                        acb(result);
                    }, 'json');
                };
            {% else %}

                var startsWithMatcher = function (source, property) {
                    return regexMatcher(source, property, function (q) { return new RegExp('^' + q, 'i'); });
                };
                var endsWithMatcher = function (source, property) {
                    return regexMatcher(source, property, function (q) { return new RegExp(q + '$', 'i'); });
                };
                var containsMatcher = function (source, property) {
                    return regexMatcher(source, property, function (q) { return new RegExp(q, 'i'); });
                };

                var regexMatcher = function (source, property, regexFactory) {
                    return function findMatches(q, cb) {
                        var matches = [], regex = regexFactory.call(null, q);

                        $.each(source, function (i, item) {
                            if (regex.test(property ? item[property] : item)) {
                                matches.push(item);
                            }
                        });

                        cb(matches);
                    };
                };

                matcher = {{ matcher }}Matcher.call({}, {{ source | json_encode | raw }}, {{ label_key | json_encode | raw }});
            {% endif %}

            var dataSource = {
                name: {{ name | json_encode | raw }},
                limit: {{ limit | json_encode | raw }},
                display: {{ label_key | json_encode | raw }},
                source: matcher
            };

            // Update original field.
            $('#typeahead_{{ id }}').typeahead({{ config | json_encode | raw }}, dataSource).bind('typeahead:selected', function (e, item) {
                $('#{{ id }}').val(key ? item[key] : item);
            });
        });
    </script>
{% endblock %}
